import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import { Todo } from "../todos/todoSlice";

export interface TodoModel
{
    _id?:string,
    title:string,
    completed:boolean
}

//https://jsonplaceholder.typicode.com/
export const todosApiSlice = createApi({
    baseQuery: fetchBaseQuery({ baseUrl: "http://localhost:3000/api" }),
    reducerPath: "todosApi",
    // Tag types are used for caching and invalidation.
    tagTypes: ["Todos"],
    endpoints: (build) => ({
        // Supply generics for the return type (in this case `QuotesApiResponse`)
        // and the expected query argument. If there is no argument, use `void`
        // for the argument type instead.
        getAllTodos: build.query<TodoModel[],any>({
            query: () => `todos`,
            // `providesTags` determines which 'tag' is attached to the
            // cached data returned by the query.
            providesTags: (result, error, id) => [{ type: "Todos" }],
        }),
        saveTodo:build.mutation<TodoModel,TodoModel>({
            query: (todo:TodoModel) => ({
                url: `todos`,
                method: 'POST',
                body: todo,
            }),
            invalidatesTags: [{ type: 'Todos'}],
        }),
    }),
});

// Hooks are auto-generated by RTK-Query
// Same as `quotesApiSlice.endpoints.getQuotes.useQuery`
//console.log('TodosApiSlice ',todosApiSlice)
export const { useGetAllTodosQuery ,useSaveTodoMutation} = todosApiSlice;
