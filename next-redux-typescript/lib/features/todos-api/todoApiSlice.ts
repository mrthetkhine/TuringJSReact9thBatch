import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import { Todo } from "../todos/todoSlice";

export interface TodoModel
{
    _id?:string,
    title:string,
    completed:boolean
}

//https://jsonplaceholder.typicode.com/
export const todosApiSlice = createApi({
    baseQuery: fetchBaseQuery({ baseUrl: "http://localhost:3000/api" }),
    reducerPath: "todosApi",
    // Tag types are used for caching and invalidation.
    tagTypes: ["Todos"],
   /* refetchOnFocus: true,*/
    refetchOnReconnect: true,
    endpoints: (build) => ({

        getAllTodos: build.query<TodoModel[],any>({
            query: () => `todos`,
            transformResponse: (response: TodoModel[], meta, arg) => {
                console.log('Response ',response);
                return response;
            },
            providesTags: (result, error, id) => [{ type: "Todos" }],
        }),
        saveTodo:build.mutation<TodoModel,TodoModel>({
            query: (todo:TodoModel) => ({
                url: `todos`,
                method: 'POST',
                body: todo,
            }),
            //Pessimistic update
            async onQueryStarted(todo:TodoModel , { dispatch, queryFulfilled }) {
                console.log('todo ',todo);
                let patchResult ;
                try {
                    const {data:savedTodo} = await queryFulfilled;
                    patchResult = dispatch(
                        todosApiSlice.util.updateQueryData('getAllTodos', undefined, (draft) => {
                            draft = draft.push(savedTodo);
                            return draft;
                        }),
                    );
                    console.log('Saved todo ',savedTodo);
                } catch {

                }
            }
          /*  invalidatesTags: [{ type: 'Todos'}],*/
        }),
       /* deleteTodo:build.mutation<TodoModel,string>({
            query: (todoId:string) => ({
                url: `todos/${todoId}`,
                method: 'DELETE',

            }),
            invalidatesTags: [{ type: 'Todos'}],
        }),*/
        //Optimistic update
        deleteTodo:build.mutation<TodoModel,string>({
            query: (todoId:string) => ({
                url: `todos/${todoId}`,
                method: 'DELETE',

            }),
            async onQueryStarted(id:string , { dispatch, queryFulfilled }) {
                console.log('Id ',id);
                const patchResult = dispatch(
                    todosApiSlice.util.updateQueryData('getAllTodos', undefined, (draft) => {
                        //console.log('Draft ',draft);
                        draft = draft.filter(todo=>todo._id != id);
                        //console.log('Draft ',draft);
                        return draft;
                    }),
                );
                try {
                    const {data:deletedTodo} = await queryFulfilled
                    console.log('Deleted todo ',deletedTodo);
                } catch {
                    patchResult.undo();
                }
            }
            
            //invalidatesTags: [{ type: 'Todos'}],
        }),
        updateTodo:build.mutation<TodoModel,TodoModel>({
            query: (todo:TodoModel) => ({
                url: `todos/${todo._id}`,
                method: 'PUT',
                body:todo,
            }),
            async onQueryStarted(todo:TodoModel , { dispatch, queryFulfilled }) {
                console.log('Todo ',todo);
                const patchResult = dispatch(
                    todosApiSlice.util.updateQueryData('getAllTodos', undefined, (draft) => {
                        //console.log('Draft ',draft);
                        draft = draft.map(item=>item._id == todo._id?todo:item);
                        //console.log('Draft ',draft);
                        return draft;
                    }),
                );
                try {
                    const {data:updateTodo} = await queryFulfilled
                    console.log('updated todo ',updateTodo);
                } catch {
                    patchResult.undo();
                }
            }
            //invalidatesTags: [{ type: 'Todos'}],
        }),
    }),
});

// Hooks are auto-generated by RTK-Query
// Same as `quotesApiSlice.endpoints.getQuotes.useQuery`
//console.log('TodosApiSlice ',todosApiSlice)
export const { useGetAllTodosQuery ,useSaveTodoMutation, useDeleteTodoMutation, useUpdateTodoMutation} = todosApiSlice;
